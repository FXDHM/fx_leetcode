这个题是找到在1到数组长度范围内，数组中没有出现的数字，以数组的形式输出
思路：
用map，没有出现的是0，出现了的不是0.
结果运行出来奇慢
Runtime：439ms
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> ans;
        map<int,int> m;
        for(int i = 1;i <= nums.size();i++){
            m[i] = 0;
        }
        for(int i = 0;i < nums.size();i++){
            m[nums[i]]++;
        }
        for(int i = 1;i <= nums.size();i++){
            if(m[i] == 0)
                ans.push_back(i);
        }
        return ans;
    }
};

找了discuss中的vote max，具体的思路是遍历数组中的数，把数对应位置的值变为负数，则到最后数组中不为负数的所在下标+1即为在数组中没有出现过的值
一开始不理解为啥要用到abs，后来相通了，是因为生成负数，如果负数-1，则超出下标范围。
Runtime：173ms
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums){
        int　len = nums.size();
        for(int i = 0;i < len;i++){
            int m = abs(nums[i]) - 1;
            nums[m] = nums[m] > 0? -nums[m]:nums[m];
        }
        vector<int> res;
        for(int i = 0;i < len;i++){
            if(nums[i] > 0) res.push_back(nums[i+1]);
        }
        return res;
    }
}；
